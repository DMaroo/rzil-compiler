# SPDX-FileCopyrightText: 2022 Rot127 <unisono@quyllur.org>
# SPDX-License-Identifier: LGPL-3.0-only

transform_test = [
'{RdV=siV;}',
'{ ; RdV=siV;}',
'{ RdV=RtV-RsV;}',
'{         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));             RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));     }',
'{; riV = (riV & ~(4 - 1));         (HEX_REG_ALIAS_LR = (hex_next_pc(pkt) & (0xfffffffe)));;        JUMP((HEX_REG_ALIAS_PC)+riV);     }',
'{PdV=((((uint32_t)(RsV))>((uint32_t)(RtV))) ? 0xff : 0x00);}',
'{ RdV=RsV*RtV;}',
'{;         EA = RsV + siV;     mem_store_u64(EA, RttV); }',
'{ ;         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((SiV) & 0x0ffffffffLL) << ((0) * 32));             RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((siV) & 0x0ffffffffLL) << ((1) * 32));     }',
'{        EA = (HEX_REG_ALIAS_SP) + uiV;     mem_store_u32(EA, RtV);}',
'{        EA = (HEX_REG_ALIAS_SP) + uiV;     RddV = (size8u_t)(mem_load_u64(EA));}',
'{; PdV=((RsV>siV) ? 0xff : 0x00);}',
'{ RdV=RsV;}',
'{RdV = clo32(~RsV);}',
'{if((!((PuN) & 1))){RdV=RsV+RtV;} else {cancel_slot;}}',
'{;         EA = RsV + siV;     RddV = (size8u_t)(mem_load_u64(EA)); }',
'{        EA = (HEX_REG_ALIAS_SP) + siV;     mem_store_u64(EA, RttV);}',
'{         EA = (HEX_REG_ALIAS_SP) + -8;     mem_store_u64(EA, (((((uint64_t)((HEX_REG_ALIAS_LR))) << 32) | ((uint32_t)((HEX_REG_ALIAS_FP)))) ^ (((uint64_t)(HEX_REG_ALIAS_FRAMEKEY)) << 32))); (HEX_REG_ALIAS_FP = EA);; g_assert_not_reached();; (HEX_REG_ALIAS_SP = EA-uiV);; }',
'{;         EA = RsV + siV;     mem_store_u32(EA, RtV); }',
'{ size8u_t tmp;  EA = (RsV);  tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)(HEX_REG_ALIAS_FRAMEKEY)) << 32)); (HEX_REG_ALIAS_SP = EA+8);; JUMP(((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL))));}',
'{ ; riV = (riV & ~(4 - 1));         (HEX_REG_ALIAS_LC0 = RsV);;        (HEX_REG_ALIAS_SA0 = (HEX_REG_ALIAS_PC)+riV);;     HEX_REG_USR_NEW = ((reg_field_info[USR_LPCFG].width) ? deposit64(HEX_REG_USR_NEW, (reg_field_info[USR_LPCFG].offset), (reg_field_info[USR_LPCFG].width), (((0)))) : HEX_REG_USR_NEW); }',
'{ ; RdV=RsV+siV;}',
'{ RdV = (((RsV) < 0) ? (-(RsV)) : (RsV)); }',
'{        EA = RsV + uiV;     ; mem_store_u32(EA, SiV); }',
'{ int i; for (i=0;i<2;i++) {         RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))>>uiV)) & 0x0ffffffffLL) << ((i) * 32));     } }',
'{if((!((PuN) & 1))){RdV=RtV-RsV;} else {cancel_slot;}}',
'{ int i; for (i=0;i<2;i++) {         RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((fCAST4_8u(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (fCAST4_8u(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffffffffLL) << ((i) * 32));     } }',
'{; if (((PuV) & 1)) { ;riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);; }}',
'{; if ((!((PuV) & 1))) { ;riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);; }}',
'{; riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);}',
'{ RdV=RsV;}',
'{         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((uiV) & 0x0ffffffffLL) << ((0) * 32));             RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((1) & 0x0ffffffffLL) << ((1) * 32));     }',
'{ ; RdV=uiV;}',
'{; if ((((P0)) & 1)) {JUMP((HEX_REG_ALIAS_LR));}}',
'{; if (((PuV) & 1)) { JUMP(RsV);; }}',
'{; if ((!((PuV) & 1))) { JUMP(RsV);; }}',
'{PdV=PsV ^ PtV;}',
'{ ; RdV = (((PuV) & 1) ? siV : SiV); }',
'{ ; RdV=siV-RsV;}',
'{if(((PuV) & 1)){; RdV=RsV+siV;} else {cancel_slot;}}',
'{ WRITE_PRED(P0, (((RsV>UiV)) ? 0xff : 0x00)); }', ' if ((env->new_pred_value[0] & 1)) {; riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);}',
'{        EA = RsV + uiV;     RdV = (size2s_t)(mem_load_s16(EA));}',
'{        EA = RsV + uiV;     RdV = (size4u_t)(mem_load_u32(EA));}',
'{ ; RdV=uiV;}',
'{        EA = RsV + uiV;     mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));}',
'{ ; RxV=RxV+siV;}',
'{         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((0) * 32));             RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((0) & 0x0ffffffffLL) << ((1) * 32));     }',
]

euclid_instructions = [
    'A4_ext',
    'A2_tfrsi',
    'A2_sub',
    'A2_combinew',
    'J2_call',
    'C2_cmpgtu',
    'M2_mpyi',
    'S2_storerd_io',
    'A2_combineii',
    'SS2_storew_sp',
    'SL2_loadrd_sp',
    'C2_cmpgti',
    'A2_tfr',
    'S2_cl0',
    'A2_paddfnew',
    'L2_loadrd_io',
    'J2_jumpr',
    'A2_nop',
    'SS2_stored_sp',
    'SS2_allocframe',
    'S2_storeri_io',
    'L4_return',
    'J2_loop0r',
    'A2_addi',
    'A2_abs',
    'S4_storeiri_io',
    'S2_lsr_i_vw',
    'A2_psubfnew',
    'SA1_seti_undocumented',
    'SA2_tfrsi',
    'S2_lsl_r_vw',
    'J2_jumpt',
    'J2_jumpf',
    'J2_jump',
    'SA1_tfr',
    'SA1_combine1i',
    'SA1_seti',
    'SL2_jumpr31_t',
    'J2_jumprt',
    'J2_jumprf',
    'C2_xor',
    'C2_muxii',
    'A2_subri',
    'A2_paddit',
    'X2_autojoin_sa1_tfr_sl2_jumpr31_t',
    'J4_cmpgti_tp0_jump_t',
    'SL2_loadrh_io',
    'SL1_loadri_io',
    'SA1_seti',
    'SS2_storeh_io',
    'SA1_addi',
    'SA1_combinezr',
]
