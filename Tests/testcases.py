# SPDX-FileCopyrightText: 2022 Rot127 <unisono@quyllur.org>
# SPDX-License-Identifier: LGPL-3.0-only

insn_tests_hexagon = {
    "J2_jump": "{(riV); riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);}",
    "J2_jumpr": "{JUMP(RsV);}",
    "J2_jumpt": "{; if (((PuV) & 1)) { (riV);riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);; }}",
    "J2_jumpf": "{; if ((!((PuV) & 1))) { (riV);riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);; }}",
    "J2_jumprt": "{; if (((PuV) & 1)) { JUMP(RsV);; }}",
    "J2_jumprf": "{; if ((!((PuV) & 1))) { JUMP(RsV);; }}",
    "J4_cmpgti_tp0_jump_t_part0": "{ if ((P0_NEW & 1)) {(riV); riV = (riV & ~(4 - 1)); JUMP((HEX_REG_ALIAS_PC)+riV);}}",
    "J4_cmpgti_tp0_jump_t_part1": "{ P0 = (((RsV>UiV)) ? 0xff : 0x00);; }",
    "J2_call": "{(riV); riV = (riV & ~(4 - 1)); (HEX_REG_ALIAS_LR = (get_npc(pkt) & (0xfffffffe))); JUMP((HEX_REG_ALIAS_PC)+riV);; }",
    "J2_loop0r": "{ (riV); riV = (riV & ~(4 - 1)); HEX_REG_ALIAS_SA0 = (HEX_REG_ALIAS_PC)+riV; (HEX_REG_ALIAS_LC0 = RsV); HEX_REG_ALIAS_USR_NEW = ((REGFIELD(HEX_RF_WIDTH, HEX_REG_FIELD_USR_LPCFG)) ? deposit64(HEX_REG_ALIAS_USR_NEW, (REGFIELD(HEX_RF_OFFSET, HEX_REG_FIELD_USR_LPCFG)), (REGFIELD(HEX_RF_WIDTH, HEX_REG_FIELD_USR_LPCFG)), (((0)))) : HEX_REG_ALIAS_USR_NEW); }",
    "L2_loadrd_io": "{(siV);         EA = RsV + siV;    ; RddV = (size8u_t)(mem_load_u64(EA)); }",
    "S2_storeri_io": "{(siV);         EA = RsV + siV;    ; mem_store_u32(EA, RtV); }",
    "S2_storerd_io": "{(siV);         EA = RsV + siV;    ; mem_store_u64(EA, RttV); }",
    "L4_return": "{ size8u_t tmp;  EA = (RsV); ; tmp = (size8u_t)(mem_load_u64(EA)); RddV = ((tmp) ^ (((uint64_t)((HEX_REG_ALIAS_FRAMEKEY))) << 32)); (HEX_REG_ALIAS_SP = EA+8); JUMP(((int64_t)((int32_t)((RddV >> ((1) * 32)) & 0x0ffffffffLL))));}",
    "S4_storeiri_io": "{        EA = RsV + uiV;    ; (SiV); mem_store_u32(EA, SiV); }",
    "C2_cmpgtu": "{PdV=((((uint32_t)(RsV))>((uint32_t)(RtV))) ? 0xff : 0x00);}",
    "C2_cmpgti": "{(siV); PdV=((RsV>siV) ? 0xff : 0x00);}",
    "C2_xor": "{PdV=PsV ^ PtV;}",
    "C2_muxii": "{ (siV); RdV = (((PuV) & 1) ? siV : SiV); }",
    "M2_mpyi": "{ RdV=RsV*RtV;}",
    "A2_sub": "{ RdV=RtV-RsV;}",
    "A2_paddfnew": "{if((!((PuN) & 1))){RdV=RsV+RtV;} else {cancel_slot;}}",
    "A2_psubfnew": "{if((!((PuN) & 1))){RdV=RtV-RsV;} else {cancel_slot;}}",
    "A2_paddit": "{if(((PuV) & 1)){(siV); RdV=RsV+siV;} else {cancel_slot;}}",
    "A2_addi": "{ (siV); RdV=RsV+siV;}",
    "A2_abs": "{ RdV = (((RsV) < 0) ? (-(RsV)) : (RsV)); }",
    "A2_nop": "{ }",
    "A4_ext": "{ ; }",
    "A2_tfr": "{ RdV=RsV;}",
    "A2_tfrsi": "{ (siV); RdV=siV;}",
    "A2_combinew": "{         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RtV) & 0x0ffffffffLL) << ((0) * 32));    ;         RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((1) * 32));    ; }",
    "A2_combineii": "{ (siV);         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((SiV) & 0x0ffffffffLL) << ((0) * 32));    ;         RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((siV) & 0x0ffffffffLL) << ((1) * 32));    ; }",
    "A2_subri": "{ (siV); RdV=siV-RsV;}",
    "S2_lsr_i_vw": "{ int i; for (i=0;i<2;i++) {         RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              ((((((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))>>uiV)) & 0x0ffffffffLL) << ((i) * 32));    ; } }",
    "S2_lsl_r_vw": "{ int i; for (i=0;i<2;i++) {         RddV = (RddV & ~(0x0ffffffffLL << ((i) * 32))) |              (((((((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL)) < 0) ? ((((uint64_t)((uint32_t)(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) >> ((-((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))) - 1)) >> 1)                   : (((uint64_t)((uint32_t)(((uint64_t)((uint32_t)((RssV >> ((i) * 32)) & 0x0ffffffffLL)))))) << ((((7) != 0) ? sextract64((RtV), 0, (7)) : 0LL))))) & 0x0ffffffffLL) << ((i) * 32));    ; } }",
    "S2_cl0": "{RdV = clo32(~RsV);}",
    "SA1_addi": "{ (siV); RxV=RxV+siV;}",
    "SA1_tfr": "{ RdV=RsV;}",
    "SA1_seti": "{ (uiV); RdV=uiV;}",
    "SA1_combinezr": "{         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((RsV) & 0x0ffffffffLL) << ((0) * 32));    ;         RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((0) & 0x0ffffffffLL) << ((1) * 32));    ; }",
    "SA1_combine1i": "{         RddV = (RddV & ~(0x0ffffffffLL << ((0) * 32))) |              (((uiV) & 0x0ffffffffLL) << ((0) * 32));    ;         RddV = (RddV & ~(0x0ffffffffLL << ((1) * 32))) |              (((1) & 0x0ffffffffLL) << ((1) * 32));    ; }",
    "SL1_loadri_io": "{        EA = RsV + uiV;    ; RdV = (size4u_t)(mem_load_u32(EA));}",
    "SL2_loadrh_io": "{        EA = RsV + uiV;    ; RdV = (size2s_t)(mem_load_s16(EA));}",
    "SL2_loadrd_sp": "{        EA = (HEX_REG_ALIAS_SP) + uiV;    ; RddV = (size8u_t)(mem_load_u64(EA));}",
    "SL2_jumpr31_t": "{; if (((P0()) & 1)) {JUMP((HEX_REG_ALIAS_LR));}}",
    "SS2_storeh_io": "{        EA = RsV + uiV;    ; mem_store_u16(EA, ((int16_t)((RtV >> ((0) * 16)) & 0xffff)));}",
    "SS2_stored_sp": "{        EA = (HEX_REG_ALIAS_SP) + siV;    ; mem_store_u64(EA, RttV);}",
    "SS2_storew_sp": "{        EA = (HEX_REG_ALIAS_SP) + uiV;    ; mem_store_u32(EA, RtV);}",
    "SS2_allocframe": "{         EA = (HEX_REG_ALIAS_SP) + -8;    ; mem_store_u64(EA, (((((uint64_t)((HEX_REG_ALIAS_LR))) << 32) | ((uint32_t)((HEX_REG_ALIAS_FP)))) ^ (((uint64_t)((HEX_REG_ALIAS_FRAMEKEY))) << 32))); (HEX_REG_ALIAS_FP = EA); ; (HEX_REG_ALIAS_SP = EA-uiV); }",
}

euclid_instructions = [
    "A4_ext",
    "A2_tfrsi",
    "A2_sub",
    "A2_combinew",
    "J2_call",
    "C2_cmpgtu",
    "M2_mpyi",
    "S2_storerd_io",
    "A2_combineii",
    "SS2_storew_sp",
    "SL2_loadrd_sp",
    "C2_cmpgti",
    "A2_tfr",
    "S2_cl0",
    "A2_paddfnew",
    "L2_loadrd_io",
    "J2_jumpr",
    "A2_nop",
    "SS2_stored_sp",
    "SS2_allocframe",
    "S2_storeri_io",
    "L4_return",
    "J2_loop0r",
    "A2_addi",
    "A2_abs",
    "S4_storeiri_io",
    "S2_lsr_i_vw",
    "A2_psubfnew",
    "SA1_seti_undocumented",
    "SA2_tfrsi",
    "S2_lsl_r_vw",
    "J2_jumpt",
    "J2_jumpf",
    "J2_jump",
    "SA1_tfr",
    "SA1_combine1i",
    "SA1_seti",
    "SL2_jumpr31_t",
    "J2_jumprt",
    "J2_jumprf",
    "C2_xor",
    "C2_muxii",
    "A2_subri",
    "A2_paddit",
    "J4_cmpgti_tp0_jump_t",
    "SL2_loadrh_io",
    "SL1_loadri_io",
    "SA1_seti",
    "SS2_storeh_io",
    "SA1_addi",
    "SA1_combinezr",
]
