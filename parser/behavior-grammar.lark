// Copyright (C) 2020 Google LLC
// https://github.com/google/binja-hexagon
start: fbody
fbody: stmt* -> fbody

    ?stmt: "if (" [NOT] cond ")" stmt [ "else if" stmt ] [ "else" stmt ] -> if_stmt
     | "while" "(" exp ")" stmt
     | "for" "(" [ assg ] ";" [ exp ] ";" [ assg ] ")" stmt -> for_stmt
     | assg ";" -> assg_stmt
     | operand ASSGOP exp ";" -> assg_binop_stmt
     | call -> call_stmt
     | init
     | "{" stmt "}" -> multi_stmt
     | ";" -> empty_stmt

   ?exp: [NOT] call [res_hint]      -> call_exp
        | exp "?" "(" exp ")" ":" "(" exp ")" -> ternary_stmt
        | "-" exp        -> neg_exp
        | "!" exp        -> not_exp
        | "~" exp        -> bit_not_exp
        | exp BINOP exp -> exp_binop
        | exp LOGOP exp
        | operand
        | "(" exp ")"
        | cast exp
        | INTCON
        | ESCAPED_STRING

    // Macros
    ?call: VAR "(" exp ")"

    ?cond: operand
         | exp RELOP exp -> exp_relop
         | operand RELOP operand  -> cond2
         | call

    ?init: [TYPE] VAR "=" exp ";"

    NOT: "!"

    // Weight 4
    ASSGOP: "="
        |    "+="
        |    "-="
        |    "&="
        |    "^="
        |    "|="
        |    "<<="

    // Weight 3
    BINOP: "+"
        |   "-"
        |   "*"
        |   "/"
        |   "|"
        |   "&"
        |   "^"
        |   "<<"
        |   ">>"

    // Weight 2
    RELOP: "=="
        |   "!="
        |   "<="
        |   "<"
        |   ">="
        |   ">"

    // Weight 1
    LOGOP: "&&"
        |   "||"

    assg: operand ["," reg] ASSGOP [UNARY_OP] (operand | exp)     -> assign_to_op
              | operand ASSGOP [UNARY_OP] (operand | exp) ";" exp       -> assign_comma
              | exp ASSGOP [UNARY_OP] (operand | exp) -> assign_to_exp
              | operand "++" -> assign_inc

    rator: "+" | "<<" | "=" |  "-" | "&" | "|" | "^" | UNARY_OP
    UNARY_OP: "++" | "~" | "--"
    SUBFIELD: ".uh" | ".h" | ".uw" | ".w" | ".ub" | ".b"

    SHIFT_HINT: ":<<1" | ":<<16" | ":>>1" | ":shift"
    RND_HINT: ":rnd" | ":crnd"
    SAT_HINT: ":sat"
    HILO_HINT: ":hi" | ":lo"
    raw_hint: ":raw" [HILO_HINT]
    JUMP_HINT: ":t" | ":nt"
    CARRY_HINT: ":carry"
    SCALE_HINT: ":scale"
    LIB_HINT: ":lib"
    POS_HINT: ":pos"
    NEG_HINT: ":neg"
    CHOP_HINT: ":chop"
    SCATTER_HINT: ":scatter_release"
    NOMATCH_HINT: ":nomatch"
    ?res_hint: SHIFT_HINT [res_hint]
             | RND_HINT [res_hint]
             | SAT_HINT [res_hint]
             | raw_hint [res_hint]
             | JUMP_HINT [res_hint]
             | CARRY_HINT [res_hint]
             | SCALE_HINT
             | LIB_HINT
             | POS_HINT
             | NEG_HINT
             | CHOP_HINT
             | SCATTER_HINT
             | NOMATCH_HINT

    circ_addr: imm_or_circi ":circ(" reg ")"
    circ_i: "I"
    ?imm_or_circi: imm | circ_i

    const: "#" SIGNED_NUMBER

    imm: "#" IMMLETT [INT] [":" INT]
    IMMLETT: /[rRsSuUm]/

    reg:  REG_A REG_B
    REG_A: /[MNORCPQXSGVZA]/
    REG_B: /[stuvwxyzdefg]+/

    pred_reg: "p" DIGIT
    GP_REG: "gp"
    sys_reg: "pc" | "sgp" DIGIT ":0"? | "r29" | "r31"
    DOT_NEW: ".new"
    DOT_CUR: ".cur" | ".tmp"
    SUBREG: ".uh" | ".h" | ".uw" | ".w" | ".ub" | ".b"
    regbit: reg "." LOOP_INDEX
    reg_dot: reg DOT_NEW | pred_reg DOT_NEW
           | reg DOT_CUR
           | reg SUBREG
    reg_index: reg [ SUBREG ] "[" index "]"
    reg_brev: reg ":brev"
    reg_star: reg "*"
    not_reg: NOT reg
    ?any_reg: reg | reg_dot | pred_reg | GP_REG | sys_reg | reg_brev | reg_star | reg_index

    ?operand: const | imm | any_reg | not_reg | circ_addr | var | regbit

    VAR: /\w+/
    index: LOOP_INDEX | DIGIT
    LOOP_INDEX: "i"
    TYPE: "size" ("8" | "16") ("s" | "u") "_t"
    cast: "(" TYPE ")"

    INT_TYPE: "LL"

    INTCON: HEX_NUMBER | DEC_NUMBER
    HEX_NUMBER: /0x[\da-f]*/i
    DEC_NUMBER: /0|[1-9][\d_]*/i

    %import common.ESCAPED_STRING
    %import common.WORD
    %import common.INT
    %import common.DIGIT
    %import common.SIGNED_NUMBER
    %import common.WS
    %ignore WS