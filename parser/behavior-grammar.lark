// Copyright (C) 2020 Google LLC
// https://github.com/google/binja-hexagon
start: fbody
fbody: stmt* -> fbody

    ?stmt: "if (" [NOT] cond ")" stmt [ "else if (" [NOT] cond ")" stmt ] [ "else" stmt ] -> if_stmt
     | "while" "(" exp ")" stmt
     | "for" "(" [ assg ] ";" [ cond ] ";" [ assg ] ")" stmt -> for_stmt
     | assg ";" -> assg_stmt
     | init
     | exp ";"
     | "{" stmt* "}" -> multi_stmt
     | ";" -> empty_stmt

   ?exp: [NOT] call      -> call_exp
        | exp "?" exp ":" exp  -> ternary_stmt
        | "-" exp        -> neg_exp
        | "!" exp        -> not_exp
        | "~" exp        -> bit_not_exp
        | exp "++"       -> inc_exp
        | "*" exp        -> derefence_exp
        | exp BINOP exp -> exp_binop
        | exp LOGOP exp
        | operand
        | cond
        | "(" exp ")"
        | cast exp

    // Macros
    ?call: VAR "(" exp ("," exp)* ")"

    ?cond: operand
         | exp RELOP exp -> exp_relop
         | operand RELOP operand  -> cond2
         | exp

    ?init: [type] VAR "=" exp ";"

    NOT: "!"

    // Weight 4
    ASSGOP: "="
        |    "+="
        |    "-="
        |    "&="
        |    "^="
        |    "|="
        |    "<<="

    // Weight 3
    BINOP: "+"
        |   "-"
        |   "*"
        |   "**"
        |   "/"
        |   "|"
        |   "&"
        |   "^"
        |   "%"
        |   "<<"
        |   ">>"

    // Weight 2
    RELOP: "=="
        |   "!="
        |   "<="
        |   "<"
        |   ">="
        |   ">"

    // Weight 1
    LOGOP: "&&"
        |   "||"

    assg: operand ASSGOP exp     -> assign_to_op
        | exp ASSGOP exp -> assign_to_exp
        | operand "++" -> assign_inc

    // w = word; h = half word; b = byte; u = unsigned; .s64 signed 64bit
    SUBFIELD: ".uw" | ".w" | ".uh" | ".h" | ".ub" | ".b" | ("." ("s" | "u") BIT_WIDTH)

    imm: "#" IMMLETT [INT] [":" INT]
    IMMLETT: /[rRsSuUm]/

    reg:  REG_TYPE (SRC_REG | SRC_REG_PAIR)
    REG_TYPE: "C" | "N" | "P" | "R" | "M" | "Q" | "V" | "O"
    SRC_REG: "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "d" | "e" | "f" | "g"
    SRC_REG_PAIR: "ss" | "tt" | "uu" | "vv" | "xx"| "yy" | "zz" | "dd" | "ee" | "ff" | "gg"

    GP_REG: "GP"
    SYS_REG: "PC"
    hvx_pred: "Q" SRC_REG "V"
    DOT_NEW: ".new"
    regbit: reg "." VAR
    reg_dot: reg [ SUBFIELD ] DOT_NEW
           | reg [DOT_NEW] SUBFIELD
    ?any_reg: reg | reg_dot | GP_REG | SYS_REG | hvx_pred
    reg_indexed: any_reg "[" (VAR | DIGIT | exp | (exp ":" exp)) "]"

    ?operand: imm | any_reg | VAR | regbit | INTCON | reg_indexed

    VAR: /\w+/
    type: "size" BIT_WIDTH ("s" | "u") "_t"
    cast: "(" type ")"

    INT_TYPE: "LL"

    BIT_WIDTH: "8" | "16" | "32" | "64"
    INTCON: HEX_NUMBER | DEC_NUMBER
    HEX_NUMBER: /0x[\da-f]*/i
    DEC_NUMBER: /0|[1-9][\d_]*/i

    %import common.ESCAPED_STRING
    %import common.WORD
    %import common.INT
    %import common.DIGIT
    %import common.SIGNED_NUMBER
    %import common.WS
    %ignore WS